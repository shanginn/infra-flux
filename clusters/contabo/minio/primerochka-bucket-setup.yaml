---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-primerochka-setup
  namespace: minio
  annotations:
    jobRevision: "3"
spec:
  ttlSecondsAfterFinished: 3600
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: minio-config
          image: minio/mc:latest
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: rootUser
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio
                  key: rootPassword
            - name: MINIO_SERVER_URL
              value: http://minio.minio.svc.cluster.local:9000
            - name: BUCKET_NAME
              value: primerochka
            - name: USER_NAME
              value: primerochka-user
            - name: POLICY_NAME
              value: primerochka-policy
          command:
            - /bin/sh
            - -c
            - |
              set -e

              echo "Waiting for MinIO server to be ready at $MINIO_SERVER_URL..."
              until mc alias set myminio $MINIO_SERVER_URL "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD"; do
                echo "MinIO not ready yet, retrying in 10 seconds..."
                sleep 10
              done
              echo "Successfully set alias for MinIO."
              
              echo "Configuring MinIO for $BUCKET_NAME..."
              
              # Check if user already exists (more robust check)
              if mc admin user info myminio "$USER_NAME" >/dev/null 2>&1; then
                echo "User '$USER_NAME' already exists. Checking if configuration is up-to-date."
                # Potentially update password or policy if needed, or just exit.
                # For simplicity, we'll assume if user exists, setup was done.
                # If you need to ensure policy/password are updated, add logic here.
                echo "Skipping full setup as user '$USER_NAME' exists."
              
                exit 0
              fi
              
              echo "User '$USER_NAME' does not exist. Proceeding with full setup."
              
              # Generate password
              PRIMEROCHKA_PASSWORD=$(head /dev/urandom | tr -dc 'A-Za-z0-9' | head -c 32)
            
              # Create API user
              mc admin user add myminio "$USER_NAME" "$PRIMEROCHKA_PASSWORD"
              echo "User '$USER_NAME' created. with password '$PRIMEROCHKA_PASSWORD'."
              
              # Create bucket (idempotent)
              mc mb myminio/"$BUCKET_NAME" --ignore-existing
              echo "Bucket '$BUCKET_NAME' ensured."
              
              POLICY_FILE_PATH="/tmp/${POLICY_NAME}.json"
              # Create policy content
              cat > "$POLICY_FILE_PATH" <<EOF
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "s3:GetObject",
                      "s3:PutObject",
                      "s3:DeleteObject",
                      "s3:ListBucket"
                    ],
                    "Resource": [
                      "arn:aws:s3:::$BUCKET_NAME",
                      "arn:aws:s3:::$BUCKET_NAME/*"
                    ]
                  }
                ]
              }
              EOF

              mc admin policy create myminio "$POLICY_NAME" "$POLICY_FILE_PATH"
              echo "Policy '$POLICY_NAME' created/updated."

              mc admin policy attach myminio "$POLICY_NAME" --user "$USER_NAME"
              echo "Policy '$POLICY_NAME' attached to user '$USER_NAME'."
              
              # Clean up temporary policy file
              rm "$POLICY_FILE_PATH"
              echo "Temporary policy file '$POLICY_FILE_PATH' removed."
              
              echo "MinIO configuration for '$BUCKET_NAME' and user '$USER_NAME' completed successfully."